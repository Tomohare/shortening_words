# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: shortening-actions

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    name: Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage codecov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude shortening_words/_version.py,versioneer.py
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude shortening_words/_version.py,versioneer.py
    - name: Test with pytest
      run: |
        pytest
    - name: Run codecov
      run: |
        coverage run -m pytest -vs tests
        codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: true
  release:
    needs: build
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: Tomohare/shortening_words
      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
          sudo apt-get update
          sudo apt-get install -y dpkg-dev dh-python debhelper python3-virtualenv dh-virtualenv
          git fetch --prune --unshallow --tags
          python -m pip install --upgrade pip
          pip install setuptools wheel versioneer stdeb pyphen
      - name: Install extra
        run: |
          tempfolder=$(pwd)
          cd extra/make-deb
          sudo python setup.py install
          cd $tempfolder
      - name: Build
        run: |
          git stash
          yes Y | make-deb --python-version "3.9" --postinst-commands "echo nothing"
          #versioneer install
          python setup.py sdist bdist_wheel
          echo "sw_version="$(sed -n "s/\s\"version\":\s*\"v\(.*\)\"/\1/p" build/lib/shortening_words/_version.py) >> $GITHUB_ENV
      # - name: Build deb
      #   run: |
      #     dpkg-buildpackage -us -uc
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.sw_version }}
          release_name: Release ${{ env.sw_version }}
          body: |
            Changes in this Release
          draft: false
          prerelease: false
      - name: Upload release WHL
        id: upload-release-whl
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/shortening_words-${{ env.sw_version }}-py3-none-any.whl
          asset_name: shortening-words-${{ env.sw_version }}-py3-none-any.whl
          asset_content_type: application/x-wheel+zip
      - name: Upload release tar.gz
        id: upload-release-tar_gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/shortening-words-${{ env.sw_version }}.tar.gz
          asset_name: shortening-words-${{ env.sw_version }}.tar.gz
          asset_content_type: application/tar+gzip
      # - name: Upload release deb package
      #   id: upload-release-deb
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: /home/runner/work/shortening_words/shortening-words_${{ env.sw_version }}_amd64.deb
      #     asset_name: shortening-words_${{ env.sw_version }}_amd64.deb
      #     asset_content_type: application/vnd.debian.binary-package